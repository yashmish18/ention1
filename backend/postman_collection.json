{
    "info": {
        "name": "EnTion E-commerce API",
        "description": "Complete API collection for EnTion e-commerce backend with authentication, orders, payments, and delivery management.",
        "version": "1.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:5000/api",
            "type": "string"
        },
        {
            "key": "accessToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "userId",
            "value": "",
            "type": "string"
        },
        {
            "key": "orderId",
            "value": "",
            "type": "string"
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{accessToken}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set common headers",
                    "pm.request.headers.add({",
                    "    key: 'Content-Type',",
                    "    value: 'application/json'",
                    "});"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Common test script",
                    "pm.test('Status code is 200 or 201', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response has JSON content type', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});",
                    "",
                    "pm.test('Response time is less than 2000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});"
                ]
            }
        }
    ],
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Register User",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"phone\": \"1234567890\",\n  \"password\": \"password123\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.expect(pm.response.code).to.equal(201);",
                                    "});",
                                    "",
                                    "pm.test('Response has success message', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.message).to.equal('User registered successfully');",
                                    "});",
                                    "",
                                    "pm.test('Response has token', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.token).to.be.a('string');",
                                    "    pm.expect(response.token.length).to.be.greaterThan(0);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Login User",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has success message', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.message).to.equal('Login successful');",
                                    "});",
                                    "",
                                    "pm.test('Response has access token', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.accessToken).to.be.a('string');",
                                    "    pm.expect(response.accessToken.length).to.be.greaterThan(0);",
                                    "    pm.collectionVariables.set('accessToken', response.accessToken);",
                                    "});",
                                    "",
                                    "pm.test('Response has user data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.user).to.be.an('object');",
                                    "    pm.expect(response.user.email).to.equal('test@example.com');",
                                    "    pm.expect(response.user.name).to.equal('Test User');",
                                    "    pm.collectionVariables.set('userId', response.user.id);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Refresh Token",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/refresh-token",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "refresh-token"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has new access token', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.accessToken).to.be.a('string');",
                                    "    pm.expect(response.accessToken.length).to.be.greaterThan(0);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/logout",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "logout"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has logout message', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.message).to.equal('Logged out successfully');",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Orders",
            "item": [
                {
                    "name": "Create Order",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"products\": [\n    {\n      \"name\": \"Test Product 1\",\n      \"price\": 100,\n      \"quantity\": 2\n    },\n    {\n      \"name\": \"Test Product 2\",\n      \"price\": 50,\n      \"quantity\": 1\n    }\n  ],\n  \"totalAmount\": 250\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "orders"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.expect(pm.response.code).to.equal(201);",
                                    "});",
                                    "",
                                    "pm.test('Response has order ID', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response._id).to.be.a('string');",
                                    "    pm.collectionVariables.set('orderId', response._id);",
                                    "});",
                                    "",
                                    "pm.test('Response has correct user ID', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.user).to.equal(pm.collectionVariables.get('userId'));",
                                    "});",
                                    "",
                                    "pm.test('Response has correct total amount', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.totalAmount).to.equal(250);",
                                    "});",
                                    "",
                                    "pm.test('Response has pending status', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.status).to.equal('Pending');",
                                    "});",
                                    "",
                                    "pm.test('Response has products array', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.products).to.be.an('array');",
                                    "    pm.expect(response.products).to.have.length(2);",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get User Orders",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders/myorders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "orders",
                                "myorders"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has orders array', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.orders).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test('All orders belong to user', function () {",
                                    "    const response = pm.response.json();",
                                    "    const userId = pm.collectionVariables.get('userId');",
                                    "    response.orders.forEach(order => {",
                                    "        pm.expect(order.user).to.equal(userId);",
                                    "    });",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get All Orders (Admin)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "orders"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200 or 403', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Response has orders array', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.orders).to.be.an('array');",
                                    "    });",
                                    "} else {",
                                    "    pm.test('Response has admin access denied error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.equal('Admin access denied');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Cancel Order",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders/{{orderId}}/cancel",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "orders",
                                "{{orderId}}",
                                "cancel"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200 or 404', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Response has success message', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.message).to.include('cancelled');",
                                    "    });",
                                    "",
                                    "    pm.test('Order status is cancelled', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.order.status).to.equal('Cancelled');",
                                    "    });",
                                    "} else {",
                                    "    pm.test('Response has order not found error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.equal('Order not found');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Delivery",
            "item": [
                {
                    "name": "Add Delivery Partner (Admin)",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"John Delivery\",\n  \"phone\": \"9876543210\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/delivery",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "delivery"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 201 or 403', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([201, 403]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    pm.test('Response has success message', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.message).to.include('successfully');",
                                    "    });",
                                    "",
                                    "    pm.test('Response has partner data', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.partner).to.be.an('object');",
                                    "        pm.expect(response.partner.name).to.equal('John Delivery');",
                                    "    });",
                                    "} else {",
                                    "    pm.test('Response has admin access denied error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.equal('Admin access denied');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Delivery Partners (Admin)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/delivery",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "delivery"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200 or 403', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Response has partners array', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.partners).to.be.an('array');",
                                    "    });",
                                    "} else {",
                                    "    pm.test('Response has admin access denied error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.equal('Admin access denied');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Create Delhivery Shipment (Admin)",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"waybill\": \"1234567890\",\n  \"order\": \"{{orderId}}\",\n  \"consignee\": {\n    \"name\": \"John Doe\",\n    \"phone\": \"9876543210\",\n    \"address\": \"123 Main Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"pincode\": \"400001\"\n  },\n  \"pickup_location\": \"Primary\",\n  \"weight\": 1.5,\n  \"cod\": false\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/delivery/initiate-shipment",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "delivery",
                                "initiate-shipment"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200, 400, 403, or 500', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 500]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Response has success message', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.message).to.include('successfully');",
                                    "    });",
                                    "} else if (pm.response.code === 400) {",
                                    "    pm.test('Response has validation error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.be.a('string');",
                                    "    });",
                                    "} else if (pm.response.code === 403) {",
                                    "    pm.test('Response has admin access denied error', function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.error).to.equal('Admin access denied');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Products",
            "item": [
                {
                    "name": "Get All Products",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "products"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has products array', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.products).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Contact",
            "item": [
                {
                    "name": "Send Contact Form",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"message\": \"This is a test message\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/contact",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "contact"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.expect(pm.response.code).to.equal(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has success message', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.message).to.include('successfully');",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ]
}